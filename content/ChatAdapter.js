// ChatAdapters.js ‚Äì¬†one class per site, OOP‚Äëstyle
// -----------------------------------------------------------------------------
// Put this single file in your `content/` folder and list it first inside the
// `js` array of each `content_scripts` block.  It attaches **window.ChatAdapter**
// (an *instance*, already initialised for the current host) or `null` if the
// site isn‚Äôt supported yet.
//
// ‚ñ∂Ô∏è  Usage in any other content‚Äëscript
// -----------------------------------------------------------------------------
//   const chat = window.ChatAdapter;
//   if (!chat) { /* optional fallback¬†*/ }
//   chat.getTextarea().value = "Hello";
//   chat.getSendBtn()?.click();
// ----------------------------------------------------------------------------

  // C√°c button chung (d√πng cho m·ªçi adapter)
  BUTTONS = {
    MANAGE_SCENARIO: {
      id: "chatgpt-helper-button",
      text: "üõ† Qu·∫£n l√Ω k·ªãch b·∫£n",
      className: "scenario-btn btn-setup",
      onClick: () => window.__helperInjected?._toggleBuilder(),
    },
    RUN_SCENARIO: {
      id: "chatgpt-run-button",
      text: "üì§ Ch·∫°y k·ªãch b·∫£n",
      className: "scenario-btn btn-run",
      onClick: () => window.__helperInjected?._toggleRunner(),
    },
    COPY_CONTENT: {
      id: "chatgpt-copy-content-button",
      text: "üìã Copy Content",
      className: "scenario-btn btn-tool",
      onClick: () => window.__helperInjected?._toggleContentCopyPanel(),
    },
    SPLITTER: {
      id: "chatgpt-splitter-button",
      text: "‚úÇÔ∏è Text Split",
      className: "scenario-btn btn-tool",
      onClick: () => window.__helperInjected?._toggleSplitter(),
    },
    AUDIO: {
      id: "chatgpt-audio-button",
      text: "üéµ Audio",
      className: "scenario-btn btn-tool",
      onClick: () => window.__helperInjected?._toggleAudioDownloader(),
    },
  };
/* ---------------------------  Base¬†(Abstract)  --------------------------- */
class BaseChatAdapter {
  constructor() {
    console.log("üë® BaseChatAdapter constructed")
    if (new.target === BaseChatAdapter) {
      throw new TypeError("BaseChatAdapter is abstract ‚Äì use a subclass");
    }
  }

  /** Convenience DOM query (shadow‚Äëdom‚Äësafe extension point) */
  _q(sel) {
    return document.querySelector(sel);
  }

  /* ---- Mandatory interface (override in subclass) ---- */
  getTextarea() { return null; }
  getContentElements(){ return null; }
  getSendBtn()  { return null; }
  isDone()  { return null; }

  /* ---- Optional interface (override if the site supports it) ---- */
  getForm()     { return this.getTextarea() }
  getStopBtn()  { return null; }
  getVoiceBtn() { return null; }

  /* ---- Convenience helpers (shared across all adapters) ---- */
  sendMessage(text) {
    const ta = this.getTextarea();
    if (!ta) return false;
    ta.value = text;
    ta.dispatchEvent(new Event("input", { bubbles: true }));
    this.getSendBtn()?.click();
    return true;
  }

  stopGeneration() { this.getStopBtn()?.click(); }

  /* ---- Static matcher ‚Äì each subclass MUST implement ---- */
  static matches(/* hostname */) { return false; }



  // H√†m m·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ danh s√°ch button c·∫ßn d√πng (ch·ªâ c√≥ 3 button chung)
  getButtonConfigs() {
    return [
      BUTTONS.MANAGE_SCENARIO,
      BUTTONS.RUN_SCENARIO,
      BUTTONS.COPY_CONTENT,
    ];
  }

  // H√†m ch√®n button (d√πng chung cho m·ªçi adapter)
  insertHelperButtons() {
    if (document.querySelector('#chatgpt-helper-button-container')) return; // ƒê√£ t·ªìn t·∫°i
    const chatForm = this.getForm();
    if (!chatForm) {
      return;
    }

    const container = document.createElement("div");
    container.id = "chatgpt-helper-button-container";

    // L·∫•y danh s√°ch button t·ª´ l·ªõp con
    const buttons = this.getButtonConfigs();

    // T·∫°o button t·ª´ config
    buttons.forEach(config => {
      const btn = this._createButton(config);
      container.appendChild(btn);
    });

    chatForm.after(container);
  }

  // Helper method ƒë·ªÉ t·∫°o button
  _createButton({ id, text, className, onClick }) {
    const btn = document.createElement("button");
    btn.id = id;
    btn.textContent = text;
    btn.className = className;
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      onClick();
    });
    return btn;
  }
}

/* -----------------------------  ChatGPT.com  ----------------------------- */
class ChatGPTAdapter extends BaseChatAdapter {
  static matches(host) {
    return /(?:chat\.openai|chatgpt)\.com$/i.test(host);
  }

  getTextarea() {
    return this._q("#prompt-textarea")
  }
  getSendBtn()  { return this._q('button[aria-label="Send prompt"]'); }
  getStopBtn()  { return this._q('button[aria-label="Stop generating"]'); }
  getVoiceBtn() { return this._q('button[aria-label="Start voice mode"]'); }

  isDone() {
    const stopBtn = this.getStopBtn();
    const sendBtn = this.getSendBtn();
    const voiceBtn = this.getVoiceBtn();
    const done = (!stopBtn && sendBtn && sendBtn.disabled) || (!stopBtn
        && voiceBtn);
    return done;
  }
  getForm() {
    return this.getTextarea()?.closest("form") ?? null;
  }

  getContentElements(){
    return Array.from(document.getElementsByClassName(
        'markdown prose dark:prose-invert w-full break-words'));
  }


  // Tr·∫£ v·ªÅ danh s√°ch button c·∫ßn d√πng (3 chung + 2 ƒë·∫∑c th√π)
  getButtonConfigs() {
    return [
      ...super.getButtonConfigs(), // 3 button chung
      BUTTONS.SPLITTER,
      BUTTONS.AUDIO,
    ];
  }
}

/* ----------------------------  DeepSeek.com  ----------------------------- */
class DeepSeekAdapter extends BaseChatAdapter {
  countDivContent = 0;
  timesCheckDone = 0;
  static matches(host) { return /deepseek\.com$/i.test(host); }

  constructor() {
    super();
    const elementHTMLCollectionOf = document.getElementsByClassName('ds-markdown ds-markdown--block');
    this.countDivContent = elementHTMLCollectionOf.length;
  }
  getTextarea () {
    // ph·∫ßn t·ª≠ nh·∫≠p chat duy nh·∫•t c·ªßa DeepSeek
    return this._q('textarea#chat-input');
  }
  getSendBtn () {
    const root = this.getForm();
    if (!root) return null;

    /* trong root c√≥ nhi·ªÅu [role="button"]; send-btn lu√¥n l√† PH·∫¶N T·ª¨ CU·ªêI
       c√≥ thu·ªôc t√≠nh aria-disabled (true/false).  Ch·ªçn n√∫t ƒë√≥ ƒë·ªÉ click. */
    const btns = [...root.querySelectorAll('[role="button"][aria-disabled]')];
    const btn  = btns.at(-1) || null;     // n√∫t cu·ªëi l√† Send

    // B·ªçc thu·ªôc t√≠nh disabled ƒë·ªÉ ScenarioRunner ƒë·ªçc ƒë∆∞·ª£c
    if (btn && btn.disabled === undefined) {
      Object.defineProperty(btn, 'disabled', {
        get() { return btn.getAttribute('aria-disabled') === 'true'; },
        configurable: true
      });
    }
    return btn;
  }

  getStopBtn() {
    const root = this.getForm();
    if (!root) {
      return null;
    }

    // t√¨m ph·∫ßn t·ª≠ c√≥ icon _480132b r·ªìi leo l√™n button
    const icon = root.querySelector('div._480132b');
    const btn = icon ? icon.closest('[role="button"]') : null;

    // b·ªçc thu·ªôc t√≠nh disabled (d·ª±a tr√™n aria-disabled) cho ƒë·ªìng nh·∫•t API
    if (btn && btn.disabled === undefined) {
      Object.defineProperty(btn, 'disabled', {
        get() {
          return btn.getAttribute('aria-disabled') === 'true';
        },
        configurable: true
      });
    }
    return btn;
  }  // DeepSeek places everything inside a <form>; inherit default getForm()

  isDone() {
      console.log('check isDone times: ', this.timesCheckDone);
      const elementHTMLCollectionOf = document.getElementsByClassName('ds-markdown ds-markdown--block');
      if(this.countDivContent + 1 === elementHTMLCollectionOf.length) {
        this.countDivContent ++;
        console.log('isDone return true', this.countDivContent);
        return true;
      }
    console.log('isDone return false')
    return false;
  }

  /** Tr·∫£ v·ªÅ DIV c√°ch textare 3 t·∫ßng ‚Äì KH√îNG d√πng class c·ªë ƒë·ªãnh */
  getForm() {
    let el = this.getTextarea();
    for (let i = 0; i < 3 && el; i++) {
      // nh·∫£y t·ªõi DIV cha li·ªÅn k·ªÅ
      do { el = el.parentElement; } while (el && el.tagName !== 'DIV');
    }
    return el ?? null;                       // null n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c
  }
}

/* ----------------------------  qwen.ai  ----------------------------- */
class QwenAdapter extends BaseChatAdapter {
  /** Kh·ªõp domain Qwen */
  static matches (host) { return /(?:qwen\.ai)$/i.test(host); }

  /** √î nh·∫≠p prompt */
  getTextarea () {
    return this._q('#chat-input');
  }

  /** N√∫t G·ª¨I ‚Äì lu√¥n c√≥ id c·ªë ƒë·ªãnh */
  getSendBtn () {
    return this._q('#send-message-button');
  }

  /** N√∫t STOP khi ƒëang sinh l·ªùi ƒë√°p */
  getStopBtn () {
    // Qwen kh√¥ng ƒë·∫∑t id, nh∆∞ng icon b√™n trong c√≥ class "icon-StopIcon"
    const icon = this._q('button i.icon-StopIcon');
    return icon ? icon.closest('button') : null;
  }

  /**
   * Ho√†n t·∫•t sinh n·ªôi dung khi:
   *   ‚Äì KH√îNG c√≤n n√∫t stop, v√†
   *   ‚Äì N√∫t send t·ªìn t·∫°i & ƒëang disabled
   */
  isDone () {
    const stopBtn = this.getStopBtn();
    const sendBtn = this.getSendBtn();
    return !stopBtn && sendBtn && sendBtn.disabled;
  }

  /** Form bao quanh textarea (d√πng ƒë·ªÉ submit) */
  getForm () {
    return this._q('.chat-message-input-container-inner');
  }

  /** Ph·∫ßn HTML ch·ª©a n·ªôi dung ph·∫£n h·ªìi c·ªßa bot (markdown) */
  getContentElements () {
    /* 1Ô∏è‚É£ M·ªói message c·ªßa Qwen b·ªçc trong .response-message-body  */
    /* 2Ô∏è‚É£ Ph·∫ßn markdown lu√¥n n·∫±m trong .markdown-content-container / .markdown-prose */
    /* 3Ô∏è‚É£ M·ªói kh·ªëi c√≤n c√≥ id #response-content-container (l·∫∑p l·∫°i)                  */
    return Array.from(document.querySelectorAll(
      '.response-message-body .markdown-content-container,' +  // ph·∫ßn m·ªõi nh·∫•t
      '.response-message-body .markdown-prose,' +              // fallback
      '#response-content-container'                            // id (kh√¥ng unique)
    ));
  }
}

/* -----------------------------  Grok (x.ai)  ----------------------------- */
class GrokAdapter extends BaseChatAdapter {
  /** Kh·ªõp c√°c domain Grok th∆∞·ªùng g·∫∑p tr√™n web-app */
  static matches (host) {
    /*  grok.com  |  grok.x.ai  |  x.com (grok sub-page)  */
    return /(?:^|\.)grok\.com$|(?:^|\.)grok\.x\.ai$|^x\.com$/i.test(host);
  }

  /* ‚îÄ‚îÄ C√°c selector ch√≠nh ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  /** √î nh·∫≠p prompt ‚Äì duy nh·∫•t c√≥ aria-label nh∆∞ sau */
  getTextarea () {
    return this._q('textarea[aria-label="Ask Grok anything"]');
  }

  /** N√∫t SEND (submit) n·∫±m trong form, c√≥ aria-label="Submit" */
  getSendBtn () {
    const btn = this._q('form button[type="submit"][aria-label="Submit"]');
    return btn;
  }

  /** N√∫t STOP hi·ªÉn th·ªã khi Grok ƒëang sinh ƒë√°p √°n (n·∫øu c√≥) */
  getStopBtn () {
    /* Grok hi·ªán d√πng c√πng vƒÉn ph·∫°m v·ªõi ChatGPT: aria-label="Stop generating" */
    return this._q('button[aria-label="Stop generating"]');
  }

  /** Form bao quanh textarea */
  getForm () {
    return this.getTextarea()?.closest('form') ?? null;
  }

  /** X√°c ƒë·ªãnh ƒë√£ sinh xong tr·∫£ l·ªùi hay ch∆∞a */
  isDone () {
    const stopBtn = this.getStopBtn();
    const sendBtn = this.getSendBtn();

    /* Khi ƒëang generate: c√≥ stopBtn.
       Khi xong: stopBtn bi·∫øn m·∫•t, sendBtn t·ªìn t·∫°i & disabled (textarea r·ªóng). */
    return !stopBtn && sendBtn && sendBtn.disabled;
  }

  /** Tr·∫£ v·ªÅ c√°c kh·ªëi markdown ch·ª©a ph·∫£n h·ªìi c·ªßa bot */
  getContentElements () {
    /* Grok render markdown trong .markdown-content-container / .markdown-prose */
    return Array.from(document.querySelectorAll(
        '.markdown-content-container, .markdown-prose'
    ));
  }
}

/* -----------------------------  Google AI Studio  ----------------------------- */
class GoogleAIStudioAdapter extends BaseChatAdapter {
  static matches(host) {
    return /aistudio\.google\.com$/i.test(host);
  }

  constructor() {
    super();
    console.log("‚úÖ GoogleAIStudioAdapter ƒë∆∞·ª£c kh·ªüi t·∫°o");
  }

  insertHelperButtons() {
    if (document.querySelector('#chatgpt-helper-button-container')) {
      return; // ƒê√£ ch√®n r·ªìi, kh√¥ng l√†m g√¨ c·∫£
    }
    const container = document.createElement("div");
    container.id = "chatgpt-helper-button-container";

    // === START: TH√äM STYLE CHO CONTAINER (V·ªä TR√ç D√çNH C·ªê ƒê·ªäNH) ===
    Object.assign(container.style, {
      position: 'fixed',
      bottom: '20px',
      left: '20px',
      zIndex: '10000', // ƒê·∫£m b·∫£o n·ªïi l√™n tr√™n c√°c ph·∫ßn t·ª≠ kh√°c
      transition: 'transform 0.2s ease-in-out'
    });
    // === END: TH√äM STYLE CHO CONTAINER ===

    const config = BUTTONS.MANAGE_SCENARIO;
    const googleAIStudioPanel = new window.GoogleAIStudioPanel(this);
    const btn = this._createButton({
      ...config,
      text: "‚öôÔ∏è Settings",
      className: '', // B·ªè class c≈© ƒë·ªÉ style th·ªß c√¥ng
      onClick: () => {
        googleAIStudioPanel.toggleClosePanel();
      }
    });

    // === START: TH√äM STYLE CHO BUTTON (D·∫†NG "BONG B√ìNG") ===
    Object.assign(btn.style, {
      backgroundColor: '#f0f4f9',
      color: '#041e49',
      border: 'none',
      borderRadius: '24px', // Bo tr√≤n
      padding: '12px 20px',
      fontSize: '14px',
      fontWeight: '500',
      cursor: 'pointer',
      boxShadow: '0 2px 6px rgba(0,0,0,0.2)', // ƒê·ªï b√≥ng
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      lineHeight: '1'
    });

    // Th√™m hi·ªáu ·ª©ng khi hover
    btn.onmouseover = () => {
        btn.style.boxShadow = '0 4px 12px rgba(0,0,0,0.25)';
        btn.style.transform = 'translateY(-2px)';
    };
    btn.onmouseout = () => {
        btn.style.boxShadow = '0 2px 6px rgba(0,0,0,0.2)';
        btn.style.transform = 'translateY(0px)';
    };
    // === END: TH√äM STYLE CHO BUTTON ===

    container.appendChild(btn);
    document.body.appendChild(container);
  }
}

// ... (code c·ªßa c√°c class adapter kh√°c) ...

/* ------------------------- YouTube Studio Adapter ------------------------- */
class YoutubeStudioAdapter extends BaseChatAdapter {
  static matches(host) {
    return /studio\.youtube\.com$/i.test(host);
  }

  constructor() {
    super();
    console.log("‚úÖ YoutubeStudioAdapter ƒë∆∞·ª£c kh·ªüi t·∫°o");
    // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ UI c·ªßa Youtube Studio ·ªïn ƒë·ªãnh r·ªìi m·ªõi ch√®n n√∫t
    setTimeout(() => this.insertHelperButtons(), 2000);
  }

  // C√°c ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng kh√¥ng c·∫ßn thi·∫øt cho trang n√†y
  getTextarea() { return null; }
  getSendBtn()  { return null; }
  isDone()      { return true; }

  /**
   * Ch√®n n√∫t "Add My Languages" v√†o trang.
   */
  insertHelperButtons() {
    if (document.getElementById('helper-add-my-languages')) {
      return; // N√∫t ƒë√£ ƒë∆∞·ª£c ch√®n
    }

    const addLanguageButton = this._q('#add-translations-button');
    if (!addLanguageButton) {
      console.warn("Kh√¥ng t√¨m th·∫•y n√∫t 'Add language'.");
      return;
    }

    const container = addLanguageButton.parentElement;
    if (!container) return;

    const myButton = this._createButton({
      id: 'helper-add-my-languages',
      text: 'üåê Add My Languages',
      className: 'style-scope ytcp-button', // D√πng class c·ªßa YT cho gi·ªëng
      onClick: () => this.addMyLanguages()
    });

    // Style cho n√∫t ƒë·ªÉ n·ªïi b·∫≠t h∆°n
    myButton.style.marginLeft = '10px';
    myButton.style.backgroundColor = '#c00'; // M√†u ƒë·ªè c·ªßa YouTube
    myButton.style.color = 'white';

    // Ch√®n n√∫t c·ªßa ch√∫ng ta v√†o sau n√∫t "Add language"
    container.appendChild(myButton);
  }

  /**
   * H√†m sleep ƒë·ªÉ ch·ªù gi·ªØa c√°c h√†nh ƒë·ªông.
   * @param {number} ms - Th·ªùi gian ch·ªù (mili gi√¢y).
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Logic ch√≠nh ƒë·ªÉ t·ª± ƒë·ªông th√™m c√°c ng√¥n ng·ªØ.
   */
  async addMyLanguages() {
    // === C√ì TH·ªÇ T√ôY CH·ªàNH DANH S√ÅCH NG√îN NG·ªÆ T·∫†I ƒê√ÇY ===
    const LANGUAGES_TO_ADD = [
      'English',
      'Vietnamese',
      'Spanish',
      'Hindi',
      'French'
    ];
    // ======================================================

    const addLanguageBtn = this._q('#add-translations-button');
    if (!addLanguageBtn) {
      alert("Kh√¥ng th·ªÉ t√¨m th·∫•y n√∫t 'Add language'!");
      return;
    }

    console.log(`B·∫Øt ƒë·∫ßu th√™m ${LANGUAGES_TO_ADD.length} ng√¥n ng·ªØ...`);

    for (const langName of LANGUAGES_TO_ADD) {
      // M·ªói l·∫ßn l·∫∑p, ph·∫£i click l·∫°i n√∫t "Add language" ƒë·ªÉ m·ªü menu
      addLanguageBtn.click();

      // Ch·ªù cho menu ng√¥n ng·ªØ xu·∫•t hi·ªán
      await this.sleep(500);

      // T√¨m ƒë√∫ng ng√¥n ng·ªØ trong danh s√°ch
      const allItems = document.querySelectorAll('tp-yt-paper-item .item-text');
      let foundItem = null;

      for (const item of allItems) {
        if (item.textContent.trim().toLowerCase() === langName.toLowerCase()) {
           // L·∫•y ph·∫ßn t·ª≠ cha c√≥ th·ªÉ click ƒë∆∞·ª£c
          const clickableParent = item.closest('tp-yt-paper-item');

          // Ki·ªÉm tra xem ng√¥n ng·ªØ ƒë√£ ƒë∆∞·ª£c th√™m (b·ªã disable) ch∆∞a
          if (clickableParent && !clickableParent.hasAttribute('disabled')) {
            foundItem = clickableParent;
            break;
          } else {
            console.log(`Ng√¥n ng·ªØ "${langName}" ƒë√£ t·ªìn t·∫°i ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a.`);
            foundItem = 'DISABLED'; // ƒê√°nh d·∫•u ƒë·ªÉ b·ªè qua
            // C·∫ßn ƒë√≥ng menu l·∫°i ƒë·ªÉ ti·∫øp t·ª•c
            const menu = item.closest('tp-yt-paper-listbox');
            if (menu) {
               // M·ªôt c√°ch ƒë∆°n gi·∫£n ƒë·ªÉ ƒë√≥ng menu l√† click ra ngo√†i
               document.body.click();
            }
            break;
          }
        }
      }

      if (foundItem && foundItem !== 'DISABLED') {
        console.log(`ƒêang th√™m ng√¥n ng·ªØ: ${langName}`);
        foundItem.click();
        // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ UI c·∫≠p nh·∫≠t sau khi th√™m
        await this.sleep(1000);
      } else if (!foundItem) {
         console.warn(`Kh√¥ng t√¨m th·∫•y ng√¥n ng·ªØ "${langName}" trong danh s√°ch.`);
         // ƒê√≥ng menu n·∫øu kh√¥ng t√¨m th·∫•y
         document.body.click();
         await this.sleep(500);
      }
    }

    console.log("Ho√†n t·∫•t qu√° tr√¨nh th√™m ng√¥n ng·ªØ!");
    alert("ƒê√£ th√™m xong c√°c ng√¥n ng·ªØ ƒë√£ ch·ªçn!");
  }
}

/* -----------------------  Adapter Factory (runtime)  ---------------------- */
const ADAPTER_CTORS = [
  ChatGPTAdapter,
  DeepSeekAdapter,
  QwenAdapter,
  GrokAdapter,
  GoogleAIStudioAdapter,
  YoutubeStudioAdapter // <-- TH√äM ADAPTER M·ªöI V√ÄO ƒê√ÇY
];

let active = null;

for (const Ctor of ADAPTER_CTORS) {
  if (Ctor.matches(window.location.hostname)) {
    active = new Ctor();
    break;
  }
}

// Expose ‚Äì every other script simply grabs the instance.
window.ChatAdapter = active;

console.log("[Adapter factory] host =", window.location.hostname);
console.log("[Adapter factory] picked =", window.ChatAdapter?.constructor.name);