const ScenarioRunnerInnerHTML = `
  <div class="sr-header">
    <span class="sr-title">üì§ Scenario Runner</span>
  </div>

  <label class="sr-label" for="scenario-select">Ch·ªçn k·ªãch b·∫£n:</label>
  <select id="scenario-select"></select>

  <label class="sr-label" for="step-select">B·∫Øt ƒë·∫ßu t·ª´ c√¢u s·ªë:</label>
  <select id="step-select" disabled>
    <option value="0">(Ch·ªçn k·ªãch b·∫£n ƒë·ªÉ hi·ªán danh s√°ch)</option>
  </select>

  <div id="scenario-inputs" style="margin-top: 10px;"></div>

  <div class="sr-controls">
    <button id="sr-addqueue">‚ûï Th√™m v√†o h√†ng ƒë·ª£i <span id="sr-queue-count">0</span></button>
    <button id="sr-start">‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu</button>
    <button id="sr-pause" disabled>‚è∏ D·ª´ng</button>
    <button id="sr-resume" disabled>‚ñ∂Ô∏è Ti·∫øp</button>
  </div>
  <!-- ngay d∆∞·ªõi .sr-controls -->
  <div class="sr-queue-box">
    <strong>H√†ng ƒë·ª£i:</strong>
    <ul id="sr-queue-list"></ul>
  </div>
`;
window.ScenarioRunner = class {
  constructor(onClose) {
    console.log("‚ñ∂Ô∏è [ScenarioRunner] init");
    if (!window.ChatAdapter) {
      alert("Kh√¥ng t√¨m th·∫•y ChatAdapter ph√π h·ª£p cho trang hi·ªán t·∫°i. Scenario Runner s·∫Ω b·ªã v√¥ hi·ªáu.");
      throw new Error("ChatAdapter not available");
    }

    this.onClose = onClose;
    this.sequencer = null;
    this.templates = {};
    this._render();
    this.queue = [];            // üåü h√†ng ƒë·ª£i c√°c l·∫ßn ch·∫°y
  }

  /* ƒê·ªçc to√†n b·ªô gi√° tr·ªã bi·∫øn hi·ªán tr√™n panel */
  _readVariableValues() {
    const data = {};
    this.el.querySelectorAll("[data-key]").forEach(el => {
      const k = el.dataset.key;
      // Code M·ªöI (Khuy·∫øn kh√≠ch)
      if (el.tagName === "TEXTAREA") {
        // Lu√¥n gi·ªØ nguy√™n gi√° tr·ªã g·ªëc c·ªßa textarea, ch·ªâ c·∫ßn trim() to√†n b·ªô l√† ƒë·ªß
        data[k] = el.value.trim();
      } else {
        data[k] = el.value.trim();
      }
    });
    return data;
  }

  /* C·∫≠p nh·∫≠t con s·ªë h√†ng ƒë·ª£i tr√™n n√∫t */
  _updateQueueIndicator() {
    this.el.querySelector("#sr-queue-count").textContent = String(
        this.queue.length);
  }
  _getLoopKey(q) {
    return q.loopKey || (q.text.match(/\$\{(\w+)\}/) || [])[1];
  }

  _render() {
    console.log("üéõ [ScenarioRunner] render UI");
    this.el = document.createElement("div");
    this.el.id = "scenario-runner";
    this.el.classList.add("panel-box");
    this.el.innerHTML = ScenarioRunnerInnerHTML;

    ChatGPTHelper.mountPanel(this.el);

    chrome.storage.local.get("scenarioTemplates", (items) => {
      const select = this.el.querySelector("#scenario-select");
      this.templates = items.scenarioTemplates || {};
      select.add(new Option("-- Ch·ªçn k·ªãch b·∫£n --", ""));

      Object.keys(this.templates).forEach((name) => {
        select.add(new Option(name, name));
      });

      // T·ª± ƒë·ªông g·ªçi onchange n·∫øu c·∫ßn
      select.onchange = () => {
        const name = select.value;
          /* ü©π chuy·ªÉn template v·ªÅ m·∫£ng object b·∫£o ƒë·∫£m .map() d√πng ƒë∆∞·ª£c  */
        const raw  = this.templates[name] || {};
        const list = Array.isArray(raw)          // k·ªãch b·∫£n ‚Äúc≈©‚Äù
                   ? raw
                   : (raw.questions || []);      // k·ªãch b·∫£n c√≥ {group,questions}
        // const list = this.templates[name] || [];
        console.log("üìã ƒê√£ ch·ªçn k·ªãch b·∫£n:", name);
        const stepSelect = this.el.querySelector("#step-select");
        stepSelect.innerHTML = list.map((q, idx) => {
          const preview = q.text?.slice(0, 40) || "";
          return `<option value="${idx}" title="${preview}">#${idx + 1}: ${preview}...</option>`;
        }).join("");
        stepSelect.disabled = false;

        const inputPanel = this.el.querySelector("#scenario-inputs");
        inputPanel.innerHTML = "";

        const shown = new Set();
        list.forEach(q => {
          const matches = [...q.text.matchAll(/\$\{(\w+)\}/g)];
          const loopKey = this._getLoopKey(q);   // üåü m·ªõi

          matches.forEach(match => {
            const varName = match[1];
            if (shown.has(varName)) {
              return;
            }
            shown.add(varName);

            const wrapper = document.createElement("div");
            wrapper.className = "sr-input-group";
            const label = document.createElement("label");
            label.textContent = `üß© ${varName}:`;

            let inputEl;
            if (q.type === "loop" && varName === loopKey) {
              // ch·ªâ loopKey => input number (s·ªë l·∫ßn l·∫∑p)
              inputEl = document.createElement("input");
              inputEl.type = "number";
              inputEl.placeholder = "S·ªë l·∫ßn l·∫∑p (vd: 3)";
            } else {
              // c√°c bi·∫øn c√≤n l·∫°i => textarea
              inputEl = document.createElement("textarea");
              inputEl.rows = 2;
              inputEl.placeholder = "Nh·∫≠p n·ªôi dung...";
            }

            inputEl.dataset.key = varName;
            inputEl.addEventListener("input",
                () => this._saveVariableValues(name));
            wrapper.appendChild(label);
            wrapper.appendChild(inputEl);
            inputPanel.appendChild(wrapper);
          });

        });

        // ‚è¨ Load gi√° tr·ªã ƒë√£ l∆∞u
        chrome.storage.local.get("scenarioInputValues", (result) => {
          const saved = result.scenarioInputValues?.[name] || {};
          inputPanel.querySelectorAll("[data-key]").forEach(el => {
            const key = el.dataset.key;
            const val = saved[key];
            if (val !== undefined) {
              if (el.tagName === "TEXTAREA") {
                el.value = Array.isArray(val) ? val.join("\n") : val;
              } else {
                el.value = val;
              }
            }
          });
        });
      };
    });

    // Controls
    const btnStart = this.el.querySelector('#sr-start');
    const btnPause = this.el.querySelector('#sr-pause');
    const btnResume = this.el.querySelector('#sr-resume');

    btnStart.onclick = () => this._start();
    btnPause.onclick = () => {
      this.sequencer?.pause();
      btnPause.disabled = true;
      btnResume.disabled = false;
    };
    btnResume.onclick = () => {
      this.sequencer?.resume();
      btnResume.disabled = true;
      btnPause.disabled = false;
    };

    ChatGPTHelper.makeDraggable(this.el, ".sr-header");
    ChatGPTHelper.addCloseButton(this.el, () => this.destroy());
    const btnAdd = this.el.querySelector("#sr-addqueue");
    btnAdd.onclick = () => {
      const name = this.el.querySelector("#scenario-select").value;
      if (!name) {
        return alert("Ch·ªçn k·ªãch b·∫£n tr∆∞·ªõc ƒë√£!");
      }

      const startAt = parseInt(
          this.el.querySelector("#step-select").value || "0", 10);
      const values = this._readVariableValues();   // d√πng h√†m m·ªõi
      this.queue.push({name, startAt, values});

      this._refreshQueueUI();                 // hi·ªÉn th·ªã s·ªë h√†ng ƒë·ª£i
      alert(`‚úÖ ƒê√£ th√™m b·ªô bi·∫øn v√†o h√†ng ƒë·ª£i (#${this.queue.length}). B·∫°n c√≥ th·ªÉ nh·∫≠p b·ªô ti·∫øp theo.`);
    };

  }

  _saveVariableValues(templateName) {
    const inputPanel = this.el.querySelector("#scenario-inputs");
    const data = {};
    inputPanel.querySelectorAll("[data-key]").forEach(el => {
      const key = el.dataset.key;
      if (el.tagName === "TEXTAREA") {
        const lines = el.value.split("\n").map(v => v.trim()).filter(Boolean);
        data[key] = lines.length === 1 ? lines[0] : lines;
      } else {
        data[key] = el.value.trim();
      }
    });

    chrome.storage.local.get("scenarioInputValues", (items) => {
      const all = items.scenarioInputValues || {};
      all[templateName] = data;
      chrome.storage.local.set({ scenarioInputValues: all });
    });
  }

  /* ----------------------------------------------
   * ScenarioRunner ‚Äì rewritten _start() + helper
   * ----------------------------------------------*/
  /** --------------------------------------------------------------
 *  ScenarioRunner::_start ‚Äì ch·∫°y to√†n b·ªô prompt trong queue
 *  --------------------------------------------------------------
 *  ‚Ä¢ T∆∞∆°ng th√≠ch 2 ki·ªÉu l∆∞u template:
 *      1) legacy  :  "name": [ {text,type,‚Ä¶}, ‚Ä¶ ]
 *      2) m·ªõi     :  "name": { group:"podcast", questions:[‚Ä¶] }
 *  ‚Ä¢ M·ªçi th·ª© kh√°c (queue, pause, resume‚Ä¶) gi·ªØ nguy√™n
 * ----------------------------------------------------------------*/
async _start() {
  /* 1Ô∏è‚É£  N·∫øu queue r·ªóng ‚Üí l·∫•y c·∫•u h√¨nh tr√™n UI hi·ªán t·∫°i */
  if (this.queue.length === 0) {
    const name = this.el.querySelector("#scenario-select").value.trim();
    if (!name) return alert("Vui l√≤ng ch·ªçn k·ªãch b·∫£n.");

    const startAt = parseInt(
      this.el.querySelector("#step-select").value || "0",
      10
    );
    const values = this._readVariableValues();          // üü¢ h√†m s·∫µn c√≥
    this.queue.push({ name, startAt, values });
  }

  /* 2Ô∏è‚É£  Kho√° c√°c n√∫t khi b·∫Øt ƒë·∫ßu ch·∫°y */
  this.el.querySelector("#sr-start").disabled   = true;
  this.el.querySelector("#sr-addqueue").disabled = true;
  this.el.querySelector("#sr-pause").disabled    = false;
  this.el.querySelector("#sr-resume").disabled   = true;

  /* 3Ô∏è‚É£  Tr·∫£i queue th√†nh bigList (danh s√°ch prompt th·ª±c t·∫ø) */
  const bigList = [];
  for (const job of this.queue) {
    /* --- l·∫•y template, h·ªó tr·ª£ c·∫£ 2 ƒë·ªãnh d·∫°ng --- */
    const raw = this.templates[job.name];
    if (!raw) {
      console.warn("‚ö†Ô∏è Template not found:", job.name);
      continue;
    }
    const tplArr = Array.isArray(raw) ? raw           // legacy
                                       : (raw.questions || []); // ki·ªÉu m·ªõi

    const slice   = tplArr.slice(job.startAt);
    const prompts = this._expandScenario(slice, job.values);   // üü¢ h√†m s·∫µn c√≥
    bigList.push(...prompts);
  }

  /* 4Ô∏è‚É£  D·ªçn queue & UI */
  this.queue = [];
  this._refreshQueueUI();
  this._updateQueueIndicator();

  if (bigList.length === 0) {
    alert("Kh√¥ng c√≥ prompt n√†o ƒë·ªÉ ch·∫°y.");
    this._resetControls();
    return;
  }

  /* 5Ô∏è‚É£  Kh·ªüi ch·∫°y m·ªôt m·∫°ch v·ªõi PromptSequencer */
  this.sequencer = new PromptSequencer(
    bigList,
    this._sendPrompt.bind(this),
    this._waitForResponse.bind(this),
    (idx, total) => console.log(`üì§ ${idx}/${total} done`),
    "ScenarioRunner"
  );

  // Khi sequencer k·∫øt th√∫c ‚Üí reset n√∫t
  this.sequencer.start(() => this._resetControls());
}


  /* Helper: kh√¥i ph·ª•c tr·∫°ng th√°i n√∫t sau khi ch·∫°y xong ho·∫∑c c√≥ l·ªói */
  _resetControls() {
    this.el.querySelector("#sr-start").disabled = false;
    this.el.querySelector("#sr-addqueue").disabled = false;
    this.el.querySelector("#sr-pause").disabled = true;
    this.el.querySelector("#sr-resume").disabled = true;
  }

  _expandScenario(questions, values) {
    const result = [];
    for (const q of questions) {
      if (q.type === "text") {
        result.push(q.text);
      } else if (q.type === "variable") {
        const filled = q.text.replace(/\$\{(\w+)\}/g, (_, k) => values[k] || "");
        result.push(filled);
      } else if (q.type === "loop") {
        const loopKey = this._getLoopKey(q);                 // üåü d√πng h√†m m·ªõi
        const count = parseInt(values[loopKey] || "0", 10); // s·ªë l·∫ßn l·∫∑p

        for (let i = 1; i <= count; i++) {
          // Thay loopKey b·∫±ng i, ƒë·ªìng th·ªùi replace c√°c bi·∫øn th∆∞·ªùng
          const prompt = q.text.replace(/\$\{(\w+)\}/g, (_, k) => {
            if (k === loopKey) {
              return String(i);
            }     // bi·∫øn loop
            return values[k] || "";                  // bi·∫øn th∆∞·ªùng
          });
          result.push(prompt);
        }
      }

    }
    return result;
  }

async _sendPrompt(text) {
  console.log("üí¨ [ScenarioRunner] send prompt ‚Üí", text.slice(0, 40));
  const chat = window.ChatAdapter;
  const textarea = chat.getTextarea();
  if (!textarea) throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p");

  if (textarea.tagName === 'TEXTAREA') {
    /* DeepSeek & c√°c site thu·∫ßn textarea */
    textarea.value = text;
  } else {
    /* ChatGPT (div[contenteditable]) ‚Äì gi·ªØ nguy√™n c√°ch c≈© */
    textarea.innerHTML = '';
    textarea.appendChild(Object.assign(document.createElement('p'), { textContent: text }));
  }

  /* K√≠ch ho·∫°t s·ª± ki·ªán input ƒë·ªÉ React/Vue nh·∫≠n thay ƒë·ªïi */
  textarea.dispatchEvent(new Event('input', { bubbles: true }));

  /* ƒê·ª£i n√∫t Send r·ªìi click */
  const sendBtn = await this._waitForAdapterBtn(() => chat.getSendBtn());
  sendBtn?.click();
}

  _waitForResponse(timeout = 600000) {
    console.log("‚è≥ [ScenarioRunner] waiting for response");
    return new Promise((resolve, reject) => {
      const start = Date.now();
      const timer = setInterval(() => {
        const done = window.ChatAdapter.isDone();
        if (done) {
          console.log("‚úÖ [ScenarioRunner] response received");
          clearInterval(timer);
          return resolve();
        }
        if (Date.now() - start > timeout) {
          console.log("‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è ‚åõ [ScenarioRunner] timeout");
          clearInterval(timer);
          return reject(new Error("Timeout waiting for ChatGPT response"));
        }
      }, 1000);
    });
  }

  _waitForElement(selector, maxRetries = 25, interval = 300) {
    return new Promise((resolve) => {
      let tries = 0;
      const id = setInterval(() => {
        const el = document.querySelector(selector);
        if (el || tries >= maxRetries) {
          clearInterval(id);
          if (!el) console.warn("‚ö†Ô∏è [ScenarioRunner] element not found", selector);
          resolve(el);
        }
        tries += 1;
      }, interval);
    });
  }
  _waitForAdapterBtn(fnGet, maxRetries = 25, interval = 300) {
    return new Promise((resolve) => {
      let tries = 0;
      const id = setInterval(() => {
        const el = fnGet();
        if (el || tries >= maxRetries) {
          clearInterval(id);
          if (!el) console.warn("‚ö†Ô∏è [ScenarioRunner] element not found", selector);
          resolve(el);
        }
        tries += 1;
      }, interval);
    });
  }

  destroy() {
    console.log("‚ùå [ScenarioRunner] destroy");
    this.el?.remove();
    this.onClose();
    this.sequencer?.stop();
  }

  /* C·∫≠p nh·∫≠t s·ªë ƒë·∫øm & danh s√°ch queue */
  _refreshQueueUI() {
    // C·∫≠p nh·∫≠t s·ªë hi·ªÉn th·ªã tr√™n n√∫t
    this._updateQueueIndicator();

    // Render danh s√°ch
    const listEl = this.el.querySelector("#sr-queue-list");
    listEl.innerHTML = this.queue.map((job, i) => {
      // g·ªôp bi·∫øn th√†nh chu·ªói ‚Äúkey=value‚Äù
      const vars = Object.entries(job.values)
      .map(([k, v]) => `${k}=${Array.isArray(v) ? v.join('|') : v}`)
      .join(', ');
      return `<li>#${i + 1} <em>${job.name}</em> (b·∫Øt ƒë·∫ßu t·ª´ ${job.startAt
      + 1}) ‚Äì <b>${vars}</b></li>`;
    }).join("");
  }

};
