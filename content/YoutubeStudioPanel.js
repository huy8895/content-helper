// content/YoutubeStudioPanel.js (Profile & Auto-fill Version)

const AVAILABLE_LANGUAGES = [
  'Abkhazian', 'Afar', 'Afrikaans', 'Akan', 'Akkadian', 'Albanian',
  'American Sign Language', 'Amharic', 'Arabic', 'Aramaic', 'Armenian',
  'Assamese', 'Aymara', 'Azerbaijani', 'Bambara', 'Bangla', 'Bangla (India)',
  'Bashkir', 'Basque', 'Belarusian', 'Bhojpuri', 'Bislama', 'Bodo',
  'Bosnian', 'Breton', 'Bulgarian', 'Burmese', 'Cantonese',
  'Cantonese (Hong Kong)', 'Catalan', 'Cherokee', 'Chinese', 'Chinese (China)',
  'Chinese (Hong Kong)', 'Chinese (Simplified)', 'Chinese (Singapore)',
  'Chinese (Taiwan)', 'Chinese (Traditional)', 'Choctaw', 'Coptic', 'Corsican',
  'Cree', 'Croatian', 'Czech', 'Danish', 'Dogri', 'Dutch', 'Dutch (Belgium)',
  'Dutch (Netherlands)', 'Dzongkha', 'English', 'English (Australia)',
  'English (Canada)', 'English (India)', 'English (Ireland)',
  'English (United Kingdom)', 'English (United States)', 'Esperanto',
  'Estonian', 'Ewe', 'Faroese', 'Fijian', 'Filipino', 'Finnish', 'French',
  'French (Belgium)', 'French (Canada)', 'French (France)',
  'French (Switzerland)', 'Fula', 'Galician', 'Ganda', 'Georgian', 'German',
  'German (Austria)', 'German (Germany)', 'German (Switzerland)', 'Greek',
  'Guarani', 'Gujarati', 'Gusii', 'Haitian Creole', 'Hakka Chinese',
  'Hakka Chinese (Taiwan)', 'Haryanvi', 'Hausa', 'Hawaiian', 'Hebrew', 'Hindi',
  'Hindi (Latin)', 'Hiri Motu', 'Hungarian', 'Icelandic', 'Igbo', 'Indonesian',
  'Interlingua', 'Interlingue', 'Inuktitut', 'Inupiaq', 'Irish', 'Italian',
  'Japanese', 'Javanese', 'Kalaallisut', 'Kalenjin', 'Kamba', 'Kannada',
  'Kashmiri', 'Kazakh', 'Khmer', 'Kikuyu', 'Kinyarwanda', 'Klingon', 'Konkani',
  'Korean', 'Kurdish', 'Kyrgyz', 'Ladino', 'Lao', 'Latin', 'Latvian', 'Lingala',
  'Lithuanian', 'Lower Sorbian', 'Luba-Katanga', 'Luo', 'Luxembourgish', 'Luyia',
  'Macedonian', 'Maithili', 'Malagasy', 'Malay', 'Malay (Singapore)',
  'Malayalam', 'Maltese', 'Manipuri', 'MƒÅori', 'Marathi', 'Masai', 'Meru',
  'Min Nan Chinese', 'Min Nan Chinese (Taiwan)', 'Mixe', 'Mizo', 'Mongolian',
  'Mongolian (Mongolian)', 'Nauru', 'Navajo', 'Nepali', 'Nigerian Pidgin',
  'North Ndebele', 'Northern Sotho', 'Norwegian', 'Occitan', 'Odia', 'Oromo',
  'Papiamento', 'Pashto', 'Persian', 'Persian (Afghanistan)', 'Persian (Iran)',
  'Polish', 'Portuguese', 'Portuguese (Brazil)', 'Portuguese (Portugal)',
  'Punjabi', 'Quechua', 'Romanian', 'Romanian (Moldova)', 'Romansh', 'Rundi',
  'Russian', 'Russian (Latin)', 'Samoan', 'Sango', 'Sanskrit', 'Santali',
  'Sardinian', 'Scottish Gaelic', 'Serbian', 'Serbian (Cyrillic)',
  'Serbian (Latin)', 'Serbo-Croatian', 'Sherdukpen', 'Shona', 'Sicilian',
  'Sindhi', 'Sinhala', 'Slovak', 'Slovenian', 'Somali', 'South Ndebele',
  'Southern Sotho', 'Spanish', 'Spanish (Latin America)', 'Spanish (Mexico)',
  'Spanish (Spain)', 'Spanish (United States)', 'Sundanese', 'Swahili',
  'Swati', 'Swedish', 'Tagalog', 'Tajik', 'Tamil', 'Tatar', 'Telugu', 'Thai',
  'Tibetan', 'Tigrinya', 'Tok Pisin', 'Toki Pona', 'Tongan', 'Tsonga',
  'Tswana', 'Turkish', 'Turkmen', 'Twi', 'Ukrainian', 'Upper Sorbian',
  'Urdu', 'Uyghur', 'Uzbek', 'Venda', 'Vietnamese', 'Volap√ºk', 'V√µro',
  'Welsh', 'Western Frisian', 'Wolaytta', 'Wolof', 'Xhosa', 'Yiddish',
  'Yoruba', 'Zulu'
];

// =================================================================
// UPDATED HTML
// =================================================================
const YTB_PANEL_HTML = `
  <h3 class="ts-title">‚öôÔ∏è Configure Languages & Translations</h3>
  
  <!-- PROFILE MANAGEMENT UI -->
  <div class="profile-manager">
    <select id="yt-profile-select" class="form-control"></select>
    <button id="yt-delete-profile-btn" class="ts-btn ts-btn-danger" title="Delete selected profile">üóëÔ∏è</button>
  </div>
  <div class="profile-new">
    <input type="text" id="yt-new-profile-name" class="form-control" placeholder="T√™n profile m·ªõi...">
    <button id="yt-save-as-new-btn" class="ts-btn">‚ûï L∆∞u m·ªõi</button>
  </div>
  <hr class="divider">
  <!-- END PROFILE UI -->

  <p style="font-size: 13px; color: #555;">Select languages for the current profile.</p>
  <input type="text" id="yt-language-search" class="form-control" placeholder="üîç T√¨m ng√¥n ng·ªØ...">
  
  <div id="yt-language-checkbox-container"></div>
  
  <!-- === NEW: TRANSLATION JSON UPLOAD === -->
  <hr class="divider">
  <label for="yt-json-upload" class="ts-btn" style="display: block; text-align: center; margin-bottom: 5px;">
    üìÇ T·∫£i l√™n file JSON D·ªãch thu·∫≠t
  </label>
  <input type="file" id="yt-json-upload" accept=".json" style="display: none;">
  <span id="yt-json-filename" style="font-size: 12px; color: #888; text-align: center; display: block;">Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn</span>
  <hr class="divider">
  <!-- === END NEW === -->
  
  <button id="yt-save-languages-btn" class="ts-btn ts-btn-accent" style="width: 100%; margin-top: 10px;">üíæ C·∫≠p nh·∫≠t Profile</button>
`;

// =================================================================
// REWRITTEN PANEL CLASS
// =================================================================

window.YoutubeStudioPanel = class {
  constructor(onClose) {
    console.log("‚úî YoutubeStudioPanel constructor")
    this.onClose = onClose;
    this.storageKeyProfiles = 'youtube_language_profiles';
    this.storageKeyTranslations = 'youtube_translation_data'; // Key m·ªõi cho d·ªØ li·ªáu JSON
    this.profiles = {};
    this.activeProfileName = 'default';
    this.translationObserver = null; // Bi·∫øn ƒë·ªÉ gi·ªØ MutationObserver

    this._render();
    this.loadProfiles();
    this.startTranslationObserver(); // B·∫Øt ƒë·∫ßu theo d√µi popup
  }

  _render() {
    this.el = document.createElement('div');
    this.el.id = 'youtube-studio-helper-panel';
    this.el.className = 'panel-box ts-panel';
    this.el.innerHTML = YTB_PANEL_HTML;

    ChatGPTHelper.mountPanel(this.el);
    ChatGPTHelper.makeDraggable(this.el, ".ts-title");
    ChatGPTHelper.addCloseButton(this.el, () => this.destroy());

    const container = this.el.querySelector('#yt-language-checkbox-container');
    AVAILABLE_LANGUAGES.forEach(lang => {
      const label = document.createElement('label');
      label.className = 'yt-language-label';
      label.innerHTML = `<input type="checkbox" value="${lang}"> ${lang}`;
      container.appendChild(label);
    });

    this.attachEvents();
  }

  destroy() {
    this.el?.remove();
    this.onClose?.();
  }

  attachEvents() {
    this.el.querySelector('#yt-save-languages-btn').addEventListener('click', () => this.saveCurrentProfile());
    this.el.querySelector('#yt-save-as-new-btn').addEventListener('click', () => this.saveAsNewProfile());
    this.el.querySelector('#yt-delete-profile-btn').addEventListener('click', () => this.deleteSelectedProfile());
    this.el.querySelector('#yt-profile-select').addEventListener('change', (e) => this.switchProfile(e.target.value));

    // Search event
    this.el.querySelector('#yt-language-search').addEventListener('input', (e) => {
        const keyword = e.target.value.trim().toLowerCase();
        this.el.querySelectorAll('.yt-language-label').forEach(label => {
            const langName = label.textContent.trim().toLowerCase();
            label.style.display = langName.includes(keyword) ? 'flex' : 'none';
        });
    });

    // === NEW: JSON Upload Event ===
    this.el.querySelector('#yt-json-upload').addEventListener('change', (e) => this.handleJsonUpload(e));
  }

  // --- PROFILE MANAGEMENT LOGIC (T√°i s·ª≠ d·ª•ng t·ª´ GoogleAIStudioPanel) ---

  async loadProfiles() {
    const { google_user_email: userId } = await chrome.storage.local.get("google_user_email");
    let localData = (await chrome.storage.local.get(this.storageKey))[this.storageKey] || {};

    if (userId) {
      console.log("‚òÅÔ∏è YT Panel: Attempting to load profiles from Firestore...");
      const helper = new FirestoreHelper(firebaseConfig);
      helper.collection = 'youtube_language_profiles';
      try {
        const firestoreData = await helper.loadUserConfig(userId);
        if (firestoreData && firestoreData.profiles) {
          console.log("‚òÅÔ∏è YT Panel: Loaded profiles from Firestore.");
          localData = firestoreData;
          await chrome.storage.local.set({ [this.storageKey]: firestoreData });
        }
      } catch (err) { console.error("‚ùå YT Panel: Error loading from Firestore:", err); }
    }

    this.profiles = localData.profiles || { 'default': [] };
    this.activeProfileName = localData.activeProfileName || 'default';
    this.updateProfileDropdown();
    this.fillFormWithProfile(this.activeProfileName);
  }

  updateProfileDropdown() {
    const select = this.el.querySelector('#yt-profile-select');
    if (!select) return;
    select.innerHTML = '';
    Object.keys(this.profiles).forEach(name => {
      const option = document.createElement('option');
      option.value = name; option.textContent = name;
      select.appendChild(option);
    });
    select.value = this.activeProfileName;
  }

  fillFormWithProfile(profileName) {
    const savedLangs = this.profiles[profileName] || [];
    this.el.querySelectorAll('.yt-language-label input[type="checkbox"]').forEach(cb => {
      cb.checked = savedLangs.includes(cb.value);
    });
  }

  switchProfile(profileName) {
    this.activeProfileName = profileName;
    this.fillFormWithProfile(profileName);
    this.saveAllDataToStorage();
  }

  collectDataFromForm() {
    return Array.from(this.el.querySelectorAll('.yt-language-label input:checked')).map(cb => cb.value);
  }

  saveAllDataToStorage(callback) {
    const dataToSave = {
      profiles: this.profiles,
      activeProfileName: this.activeProfileName,
    };
    chrome.storage.local.set({ [this.storageKey]: dataToSave }, callback);
    this._syncToFirestore();
  }

  saveCurrentProfile() {
    this.profiles[this.activeProfileName] = this.collectDataFromForm();
    this.saveAllDataToStorage(() => alert(`Profile "${this.activeProfileName}" updated!`));
  }

  saveAsNewProfile() {
    const newName = this.el.querySelector('#yt-new-profile-name').value.trim();
    if (!newName || this.profiles[newName]) {
      return alert(newName ? "Profile name already exists." : "Please enter a new profile name.");
    }
    this.profiles[newName] = this.collectDataFromForm();
    this.activeProfileName = newName;
    this.saveAllDataToStorage(() => {
      alert(`Saved new profile: "${newName}"`);
      this.el.querySelector('#yt-new-profile-name').value = '';
      this.updateProfileDropdown();
    });
  }

  deleteSelectedProfile() {
    const profileToDelete = this.el.querySelector('#yt-profile-select').value;
    if (Object.keys(this.profiles).length <= 1) {
      return alert("Cannot delete the last profile.");
    }
    if (confirm(`Delete profile "${profileToDelete}"?`)) {
      delete this.profiles[profileToDelete];
      this.activeProfileName = Object.keys(this.profiles)[0];
      this.saveAllDataToStorage(() => {
        alert(`Deleted profile: "${profileToDelete}"`);
        this.updateProfileDropdown();
        this.fillFormWithProfile(this.activeProfileName);
      });
    }
  }

  async _syncToFirestore() {
    const { google_user_email: userId } = await chrome.storage.local.get("google_user_email");
    if (!userId) return;

    const helper = new FirestoreHelper(firebaseConfig);
    helper.collection = 'youtube_language_profiles';
    try {
      const dataToSync = {
        profiles: this.profiles,
        activeProfileName: this.activeProfileName,
      };
      await helper.saveUserConfig(userId, dataToSync);
    } catch (err) {
      console.error("‚ùå YT Panel: Error syncing to Firestore:", err);
    }
  }

    // === NEW: JSON UPLOAD LOGIC ===
  handleJsonUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const jsonData = JSON.parse(e.target.result);
        chrome.storage.local.set({ [this.storageKeyTranslations]: jsonData }, () => {
          this.el.querySelector('#yt-json-filename').textContent = `‚úÖ ƒê√£ t·∫£i l√™n: ${file.name}`;
          alert('ƒê√£ l∆∞u d·ªØ li·ªáu d·ªãch thu·∫≠t th√†nh c√¥ng!');
        });
      } catch (err) {
        this.el.querySelector('#yt-json-filename').textContent = `‚ùå L·ªói ƒë·ªçc file`;
        alert('L·ªói: File JSON kh√¥ng h·ª£p l·ªá.');
        console.error("JSON Parse Error:", err);
      }
    };
    reader.readAsText(file);
  }

  // === NEW: TRANSLATION OBSERVER LOGIC ===

  startTranslationObserver() {
    if (this.translationObserver) return;

    console.log("‚ñ∂Ô∏è YT Panel: Translation observer v6 (Original Logic) started.");

    // H√†m x·ª≠ l√Ω chung, tr√°nh l·∫∑p code
    const handleDialog = (dialog) => {
      // D√πng setTimeout ƒë·ªÉ ƒë·∫£m b·∫£o n·ªôi dung b√™n trong dialog ƒë√£ s·∫µn s√†ng
      setTimeout(() => this.injectAutoFillButton(dialog), 500);
    };

    this.translationObserver = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {

        // K·ªãch b·∫£n 1: Thu·ªôc t√≠nh 'opened' ƒë∆∞·ª£c th√™m v√†o m·ªôt dialog ƒë√£ c√≥ s·∫µn trong DOM.
        // ƒê√¢y l√† tr∆∞·ªùng h·ª£p ph·ªï bi·∫øn cho c√°c l·∫ßn m·ªü popup th·ª© 2 tr·ªü ƒëi.
        if (mutation.type === 'attributes' && mutation.attributeName === 'opened') {
          const dialog = mutation.target;
          if (dialog.id === 'metadata-editor' && dialog.hasAttribute('opened')) {
            console.log("Observer detected 'opened' attribute change.");
            handleDialog(dialog);
          }
        }

        // K·ªãch b·∫£n 2: Dialog ƒë∆∞·ª£c th√™m m·ªõi v√†o DOM (th∆∞·ªùng l√† l·∫ßn ƒë·∫ßu ti√™n).
        // Ch√∫ng ta c·∫ßn ki·ªÉm tra c√°c node m·ªõi ƒë∆∞·ª£c th√™m v√†o.
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
           for (const node of mutation.addedNodes) {
             // Ch·ªâ quan t√¢m ƒë·∫øn Element node, b·ªè qua text node, etc.
             if (node.nodeType === 1) {
                // T√¨m dialog b√™n trong node v·ª´a ƒë∆∞·ª£c th√™m v√†o (ho·∫∑c ch√≠nh l√† node ƒë√≥)
                const dialog = node.matches('#metadata-editor[opened]') ? node : node.querySelector('#metadata-editor[opened]');
                if (dialog) {
                    console.log("Observer detected new dialog added to DOM.");
                    handleDialog(dialog);
                    // ƒê√£ t√¨m th·∫•y, kh√¥ng c·∫ßn l·∫∑p qua c√°c node kh√°c trong mutation n√†y
                    break;
                }
             }
           }
        }
      }
    });

    this.translationObserver.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['opened']
    });
  }

  // B·ªè h√†m attachContentObserver() ƒëi v√¨ n√≥ kh√¥ng c√≤n c·∫ßn thi·∫øt n·ªØa.
  stopTranslationObserver() {
    if (this.translationObserver) {
      this.translationObserver.disconnect();
      this.translationObserver = null;
      console.log("‚èπÔ∏è YT Panel: Translation observer stopped.");
    }
  }

  injectAutoFillButton(dialog) {
    const popupContent = dialog.querySelector('#metadata-editor-wrapper');
    if (!popupContent || popupContent.querySelector('#auto-fill-button-from-json')) {
      return;
    }

    const button = document.createElement('button');
    button.id = 'auto-fill-button-from-json';
    button.textContent = 'üöÄ Ch√®n t·ª´ JSON';
    // √Åp d·ª•ng class chung cho ƒë·∫πp
    button.className = 'ts-btn ts-btn-accent';
    button.style.marginLeft = '10px';

    const targetHeader = popupContent.querySelector('.metadata-editor-translated .language-header');
    if (!targetHeader) return;
    targetHeader.parentElement.appendChild(button);

    button.addEventListener('click', async () => {
      const uiLanguageName = targetHeader.textContent.trim();
      const jsonKey = uiLanguageName.toLowerCase();

      const data = await chrome.storage.local.get(this.storageKeyTranslations);
      const translations = data[this.storageKeyTranslations];

      if (!translations) {
        return alert("Ch∆∞a c√≥ d·ªØ li·ªáu JSON n√†o ƒë∆∞·ª£c t·∫£i l√™n. Vui l√≤ng t·∫£i file t·ª´ panel c·∫•u h√¨nh.");
      }

      const translationData = translations[jsonKey];
      if (translationData) {
        const { title, description } = translationData;
        const titleTextarea = popupContent.querySelector('#translated-title textarea');
        const descTextarea = popupContent.querySelector('#translated-description textarea');

        this._fillAndFireEvents(titleTextarea, title);
        this._fillAndFireEvents(descTextarea, description);

        button.textContent = '‚úÖ ƒê√£ ch√®n!';
        setTimeout(() => button.textContent = 'üöÄ Ch√®n t·ª´ JSON', 2000);
      } else {
        alert(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ng√¥n ng·ªØ '${uiLanguageName}' (key: '${jsonKey}') trong file JSON.`);
      }
    });
  }

  _fillAndFireEvents(element, value) {
    if (!element) return;
    element.focus();
    element.value = value;
    element.dispatchEvent(new Event('input', { bubbles: true }));
    element.dispatchEvent(new Event('change', { bubbles: true }));
    element.blur();
  }
};